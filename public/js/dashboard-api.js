/* ====================================================
   DASHBOARD API MODULE - SYMBIOT FINANCIAL MANAGER
   Archivo: public/js/dashboard-api.js
   Funciones de comunicaci√≥n con backend centralizadas
   ==================================================== */

// ============================================================
// üåê FUNCIONES BASE DE API
// ============================================================

/**
 * Funci√≥n base para realizar peticiones HTTP
 */
async function apiRequest(url, options = {}) {
    try {
        const defaultOptions = {
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            credentials: 'same-origin'
        };
        
        const finalOptions = { ...defaultOptions, ...options };
        
        console.log(`üì° API Request: ${options.method || 'GET'} ${url}`);
        
        const response = await fetch(url, finalOptions);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        
        console.log(`‚úÖ API Response: ${url}`, data);
        
        return data;
        
    } catch (error) {
        console.error(`‚ùå API Error: ${url}`, error);
        throw error;
    }
}

/**
 * Realizar petici√≥n GET
 */
async function apiGet(url, params = {}) {
    const queryString = new URLSearchParams(params).toString();
    const fullUrl = queryString ? `${url}?${queryString}` : url;
    
    return await apiRequest(fullUrl, { method: 'GET' });
}

/**
 * Realizar petici√≥n POST
 */
async function apiPost(url, data = {}) {
    return await apiRequest(url, {
        method: 'POST',
        body: JSON.stringify(data)
    });
}

/**
 * Realizar petici√≥n PUT
 */
async function apiPut(url, data = {}) {
    return await apiRequest(url, {
        method: 'PUT',
        body: JSON.stringify(data)
    });
}

/**
 * Realizar petici√≥n DELETE
 */
async function apiDelete(url) {
    return await apiRequest(url, { method: 'DELETE' });
}

// ============================================================
// üë§ FUNCIONES DE AUTENTICACI√ìN Y USUARIO
// ============================================================

/**
 * Cargar informaci√≥n del usuario actual
 */
async function loadCurrentUser() {
    try {
        console.log('üë§ Cargando informaci√≥n del usuario...');
        
        const response = await apiGet('/gastos/api/me');
        
        if (response.success && response.user) {
            currentUser = response.user;
            
            // Actualizar UI con informaci√≥n del usuario
            const userNameElements = document.querySelectorAll('#userName, #userNameDisplay');
            userNameElements.forEach(element => {
                if (element) element.textContent = currentUser.nombre;
            });
            
            console.log(`‚úÖ Usuario cargado: ${currentUser.nombre} (${currentUser.rol})`);
            
            return currentUser;
        } else {
            throw new Error('No se pudo obtener informaci√≥n del usuario');
        }
        
    } catch (error) {
        console.error('‚ùå Error cargando usuario:', error);
        
        // Redireccionar al login si no hay sesi√≥n v√°lida
        if (error.message.includes('401') || error.message.includes('Unauthorized')) {
            window.location.href = '/gastos/login.html';
        }
        
        throw error;
    }
}

/**
 * Verificar si el usuario es administrador
 */
function isUserAdmin() {
    return currentUser && currentUser.rol === 'admin';
}

/**
 * Cerrar sesi√≥n
 */
async function logout() {
    try {
        await apiPost('/gastos/api/logout');
        window.location.href = '/gastos/login.html';
    } catch (error) {
        console.error('‚ùå Error cerrando sesi√≥n:', error);
        // Forzar redirecci√≥n al login aunque falle la API
        window.location.href = '/gastos/login.html';
    }
}

// ============================================================
// üìä FUNCIONES DE DATOS DEL DASHBOARD
// ============================================================

/**
 * Cargar estad√≠sticas principales del dashboard
 */
async function loadDashboardStats(empresaId = null) {
    try {
        console.log('üìä Cargando estad√≠sticas del dashboard...');
        
        const params = {};
        if (empresaId) {
            params.empresa_id = empresaId;
        }
        
        const response = await apiGet('/gastos/api/dashboard', params);
        
        if (response.success) {
            // Actualizar elementos del DOM
            updateStatsElements(response.data);
            
            console.log('‚úÖ Estad√≠sticas del dashboard cargadas');
            return response.data;
        } else {
            throw new Error(response.message || 'Error cargando estad√≠sticas');
        }
        
    } catch (error) {
        console.error('‚ùå Error cargando estad√≠sticas:', error);
        
        // Mostrar valores por defecto en caso de error
        resetStatsElements();
        
        throw error;
    }
}

/**
 * Actualizar elementos de estad√≠sticas en el DOM
 */
function updateStatsElements(data) {
    const elements = {
        'balanceTotal': data.balance_general || 0,
        'totalIngresos': data.total_ingresos || 0,
        'totalGastos': data.total_gastos || 0,
        'esteMes': data.balance_mes_actual || 0
    };
    
    Object.entries(elements).forEach(([elementId, value]) => {
        const element = document.getElementById(elementId);
        if (element) {
            element.textContent = formatCurrency(value);
        }
    });
}

/**
 * Resetear elementos de estad√≠sticas a valores por defecto
 */
function resetStatsElements() {
    const elements = ['balanceTotal', 'totalIngresos', 'totalGastos', 'esteMes'];
    
    elements.forEach(elementId => {
        const element = document.getElementById(elementId);
        if (element) {
            element.textContent = '$0.00';
        }
    });
}

/**
 * Cargar estad√≠sticas espec√≠ficas de empresa
 */
async function loadCompanyStats(companyId) {
    try {
        if (!companyId) {
            // Si no hay empresa seleccionada, cargar stats generales
            return await loadDashboardStats();
        }
        
        console.log(`üè¢ Cargando estad√≠sticas de empresa ${companyId}...`);
        
        const response = await apiGet('/gastos/api/dashboard', { empresa_id: companyId });
        
        if (response.success) {
            // Actualizar stats de empresa en el selector
            updateCompanyStatsElements(response.data);
            
            // Actualizar stats principales
            updateStatsElements(response.data);
            
            console.log(`‚úÖ Estad√≠sticas de empresa ${companyId} cargadas`);
            return response.data;
        } else {
            throw new Error(response.message || 'Error cargando estad√≠sticas de empresa');
        }
        
    } catch (error) {
        console.error('‚ùå Error cargando estad√≠sticas de empresa:', error);
        throw error;
    }
}

/**
 * Actualizar elementos de estad√≠sticas de empresa
 */
function updateCompanyStatsElements(data) {
    const balanceElement = document.getElementById('companyBalance');
    const transactionsElement = document.getElementById('companyTransactions');
    
    if (balanceElement) {
        balanceElement.textContent = formatCurrency(data.balance_general || 0);
    }
    
    if (transactionsElement) {
        transactionsElement.textContent = data.total_transacciones || 0;
    }
}

// ============================================================
// üè¢ FUNCIONES DE EMPRESAS
// ============================================================

/**
 * Cargar lista de empresas
 */
async function loadCompanies() {
    try {
        console.log('üè¢ Cargando empresas...');
        
        const response = await apiGet('/gastos/api/empresas');
        
        if (response.success) {
            console.log(`‚úÖ ${response.data.length} empresas cargadas`);
            return response.data;
        } else {
            throw new Error(response.message || 'Error cargando empresas');
        }
        
    } catch (error) {
        console.error('‚ùå Error cargando empresas:', error);
        throw error;
    }
}

/**
 * Cargar empresas para modales
 */
async function loadCompaniesForModal() {
    try {
        const empresas = await loadCompanies();
        
        const selectElement = document.getElementById('transactionCompany');
        if (selectElement) {
            selectElement.innerHTML = '<option value="">Selecciona empresa</option>';
            
            empresas.forEach(empresa => {
                const option = document.createElement('option');
                option.value = empresa.id;
                option.textContent = empresa.nombre;
                selectElement.appendChild(option);
            });
            
            console.log('‚úÖ Empresas cargadas en modal de transacciones');
        }
        
    } catch (error) {
        console.error('‚ùå Error cargando empresas para modal:', error);
    }
}

// ============================================================
// üí∞ FUNCIONES DE TRANSACCIONES
// ============================================================

/**
 * Cargar transacciones recientes
 */
async function loadRecentTransactions(page = 1) {
    try {
        console.log(`üí∞ Cargando transacciones recientes - P√°gina ${page}...`);
        
        const params = {
            page: page,
            limit: transactionsPerPage
        };
        
        if (currentCompanyFilter) {
            params.empresa_id = currentCompanyFilter;
        }
        
        const response = await apiGet('/gastos/api/transacciones', params);
        
        if (response.success) {
            // Actualizar cache de transacciones
            window.recentTransactionsCache = response.data;
            
            // Renderizar transacciones
            renderRecentTransactions(response.data, response.pagination);
            
            console.log(`‚úÖ ${response.data.length} transacciones cargadas`);
            return response.data;
        } else {
            throw new Error(response.message || 'Error cargando transacciones');
        }
        
    } catch (error) {
        console.error('‚ùå Error cargando transacciones:', error);
        
        // Mostrar estado de error
        showTransactionsError('Error cargando transacciones recientes');
        
        throw error;
    }
}

/**
 * Crear nueva transacci√≥n
 */
async function createTransaction(transactionData) {
    try {
        console.log('üí∞ Creando nueva transacci√≥n...', transactionData);
        
        const response = await apiPost('/gastos/api/transacciones', transactionData);
        
        if (response.success) {
            console.log('‚úÖ Transacci√≥n creada exitosamente');
            return response;
        } else {
            throw new Error(response.message || 'Error creando transacci√≥n');
        }
        
    } catch (error) {
        console.error('‚ùå Error creando transacci√≥n:', error);
        throw error;
    }
}

/**
 * Actualizar transacci√≥n existente
 */
async function updateTransaction(transactionId, transactionData) {
    try {
        console.log(`üí∞ Actualizando transacci√≥n ${transactionId}...`, transactionData);
        
        const response = await apiPut(`/gastos/api/transacciones/${transactionId}`, transactionData);
        
        if (response.success) {
            console.log('‚úÖ Transacci√≥n actualizada exitosamente');
            return response;
        } else {
            throw new Error(response.message || 'Error actualizando transacci√≥n');
        }
        
    } catch (error) {
        console.error('‚ùå Error actualizando transacci√≥n:', error);
        throw error;
    }
}

/**
 * Eliminar transacci√≥n
 */
async function deleteTransaction(transactionId) {
    try {
        console.log(`üí∞ Eliminando transacci√≥n ${transactionId}...`);
        
        const response = await apiDelete(`/gastos/api/transacciones/${transactionId}`);
        
        if (response.success) {
            console.log('‚úÖ Transacci√≥n eliminada exitosamente');
            return response;
        } else {
            throw new Error(response.message || 'Error eliminando transacci√≥n');
        }
        
    } catch (error) {
        console.error('‚ùå Error eliminando transacci√≥n:', error);
        throw error;
    }
}

// ============================================================
// üéì FUNCIONES DE ALUMNOS (API)
// ============================================================

/**
 * Cargar lista de alumnos con filtros y paginaci√≥n
 */
async function loadStudentsData(page = 1, filters = {}) {
    try {
        console.log(`üéì Cargando alumnos v√≠a API - P√°gina ${page}...`);
        
        const params = {
            page: page,
            limit: studentsPerPage,
            empresa_id: currentCompanyFilter || 1
        };
        
        // Agregar filtros
        Object.keys(filters).forEach(key => {
            if (filters[key]) {
                params[key] = filters[key];
            }
        });
        
        const response = await apiGet('/gastos/api/alumnos', params);
        
        if (response.success) {
            console.log(`‚úÖ ${response.data.length} alumnos cargados v√≠a API`);
            return response;
        } else {
            throw new Error(response.message || 'Error cargando alumnos');
        }
        
    } catch (error) {
        console.error('‚ùå Error cargando alumnos v√≠a API:', error);
        throw error;
    }
}

/**
 * Crear nuevo alumno
 */
async function createStudent(studentData) {
    try {
        console.log('üéì Creando nuevo alumno v√≠a API...', studentData);
        
        const response = await apiPost('/gastos/api/alumnos', studentData);
        
        if (response.success) {
            console.log('‚úÖ Alumno creado exitosamente v√≠a API');
            return response;
        } else {
            throw new Error(response.message || 'Error creando alumno');
        }
        
    } catch (error) {
        console.error('‚ùå Error creando alumno v√≠a API:', error);
        throw error;
    }
}

/**
 * Actualizar alumno existente
 */
async function updateStudent(studentId, studentData) {
    try {
        console.log(`üéì Actualizando alumno ${studentId} v√≠a API...`, studentData);
        
        const response = await apiPut(`/gastos/api/alumnos/${studentId}`, studentData);
        
        if (response.success) {
            console.log('‚úÖ Alumno actualizado exitosamente v√≠a API');
            return response;
        } else {
            throw new Error(response.message || 'Error actualizando alumno');
        }
        
    } catch (error) {
        console.error('‚ùå Error actualizando alumno v√≠a API:', error);
        throw error;
    }
}

/**
 * Eliminar alumno
 */
async function deleteStudent(studentId) {
    try {
        console.log(`üéì Eliminando alumno ${studentId} v√≠a API...`);
        
        const response = await apiDelete(`/gastos/api/alumnos/${studentId}`);
        
        if (response.success) {
            console.log('‚úÖ Alumno eliminado exitosamente v√≠a API');
            return response;
        } else {
            throw new Error(response.message || 'Error eliminando alumno');
        }
        
    } catch (error) {
        console.error('‚ùå Error eliminando alumno v√≠a API:', error);
        throw error;
    }
}

// ============================================================
// üîî FUNCIONES DE ALERTAS DE PAGOS (API)
// ============================================================

/**
 * Cargar alertas de pagos
 */
async function loadPaymentAlerts(empresaId = null) {
    try {
        console.log('üîî Cargando alertas de pagos v√≠a API...');
        
        const params = {};
        if (empresaId) {
            params.empresa_id = empresaId;
        }
        
        const response = await apiGet('/gastos/api/alertas-pagos', params);
        
        if (response.success) {
            console.log('‚úÖ Alertas de pagos cargadas v√≠a API');
            return response.data;
        } else {
            throw new Error(response.message || 'Error cargando alertas de pagos');
        }
        
    } catch (error) {
        console.error('‚ùå Error cargando alertas de pagos v√≠a API:', error);
        throw error;
    }
}

// ============================================================
// üõ†Ô∏è FUNCIONES DE UTILIDAD Y MANEJO DE ERRORES
// ============================================================

/**
 * Manejar errores de API de forma centralizada
 */
function handleApiError(error, context = 'Operaci√≥n') {
    console.error(`‚ùå Error en ${context}:`, error);
    
    let userMessage = 'Ha ocurrido un error inesperado';
    
    if (error.message.includes('401')) {
        userMessage = 'Tu sesi√≥n ha expirado. Redirigiendo al login...';
        setTimeout(() => {
            window.location.href = '/gastos/login.html';
        }, 2000);
    } else if (error.message.includes('403')) {
        userMessage = 'No tienes permisos para realizar esta acci√≥n';
    } else if (error.message.includes('404')) {
        userMessage = 'El recurso solicitado no fue encontrado';
    } else if (error.message.includes('500')) {
        userMessage = 'Error interno del servidor. Intenta nuevamente';
    } else if (error.message) {
        userMessage = error.message;
    }
    
    showAlert('danger', userMessage);
    
    return {
        success: false,
        error: userMessage,
        originalError: error
    };
}

/**
 * Validar respuesta de API
 */
function validateApiResponse(response, context = 'API') {
    if (!response) {
        throw new Error(`${context}: Respuesta vac√≠a del servidor`);
    }
    
    if (typeof response !== 'object') {
        throw new Error(`${context}: Formato de respuesta inv√°lido`);
    }
    
    if (response.success === false) {
        throw new Error(response.message || response.error || `${context}: Error no especificado`);
    }
    
    return true;
}

/**
 * Reintentar petici√≥n de API en caso de fallo
 */
async function retryApiRequest(apiFunction, maxRetries = 3, delay = 1000) {
    let lastError;
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            console.log(`üîÑ Intento ${attempt} de ${maxRetries}...`);
            const result = await apiFunction();
            console.log(`‚úÖ √âxito en intento ${attempt}`);
            return result;
        } catch (error) {
            lastError = error;
            console.warn(`‚ö†Ô∏è Fallo en intento ${attempt}:`, error.message);
            
            if (attempt < maxRetries) {
                console.log(`‚è±Ô∏è Esperando ${delay}ms antes del siguiente intento...`);
                await new Promise(resolve => setTimeout(resolve, delay));
                delay *= 2; // Incrementar delay exponencialmente
            }
        }
    }
    
    console.error(`‚ùå Todos los intentos fallaron. √öltimo error:`, lastError);
    throw lastError;
}

// ============================================================
// üîó EXPOSICI√ìN DE FUNCIONES GLOBALES
// ============================================================

// Funciones base de API
window.apiRequest = apiRequest;
window.apiGet = apiGet;
window.apiPost = apiPost;
window.apiPut = apiPut;
window.apiDelete = apiDelete;

// Funciones de autenticaci√≥n
window.loadCurrentUser = loadCurrentUser;
window.isUserAdmin = isUserAdmin;
window.logout = logout;

// Funciones de dashboard
window.loadDashboardStats = loadDashboardStats;
window.loadCompanyStats = loadCompanyStats;
window.loadCompanies = loadCompanies;
window.loadCompaniesForModal = loadCompaniesForModal;

// Funciones de transacciones
window.loadRecentTransactions = loadRecentTransactions;
window.createTransaction = createTransaction;
window.updateTransaction = updateTransaction;
window.deleteTransaction = deleteTransaction;

// Funciones de alumnos (API)
window.loadStudentsData = loadStudentsData;
window.createStudent = createStudent;
window.updateStudent = updateStudent;

// Funciones de alertas
window.loadPaymentAlerts = loadPaymentAlerts;

// Funciones de utilidad
window.handleApiError = handleApiError;
window.validateApiResponse = validateApiResponse;
window.retryApiRequest = retryApiRequest;

console.log('‚úÖ Dashboard API Module cargado - Todas las funciones de API disponibles');